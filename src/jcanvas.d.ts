declare module "jcanvas";
declare module "jcanvas/dist/umd/jcanvas-*.min.js";

interface JQueryStatic {
	jCanvas: {
		defaults: Record<string, any>;
		clearCache(): void;
	};
}
interface JCanvasParams {
	align: CanvasRenderingContext2D["textAlign"] = "center";
	arrowAngle: number = 90;
	arrowRadius: number = 0;
	autosave: boolean = true;
	baseline: CanvasRenderingContext2D["textBaseline"] = "middle";
	bringToFront: boolean = false;
	ccw: boolean = false;
	closed: boolean = false;
	compositing: CanvasRenderingContext2D["globalCompositeOperation"] = "source-over";
	concavity: number = 0;
	cornerRadius: number = 0;
	count: number = 1;
	cropFromCenter: boolean = true;
	crossOrigin: HTMLImageElement["crossOrigin"] = null;
	cursors: string | null = null;
	disableEvents: boolean = false;
	draggable: boolean = false;
	dragGroups: string[] | null = null;
	groups: string[] | null = null;
	data: object | null = null;
	dx: number | null = null;
	dy: number | null = null;
	end: number = 360;
	eventX: number | null = null;
	eventY: number | null = null;
	fillStyle: string | Function = "transparent";
	fontStyle: string = "normal";
	fontSize: string = "12pt";
	fontFamily: string = "sans-serif";
	fromCenter: boolean = true;
	height: number | null = null;
	imageSmoothing: boolean = true;
	inDegrees: boolean = true;
	intangible: boolean = false;
	index: number | null = null;
	letterSpacing: number | null = null;
	lineHeight: number | null = 1;
	layer: boolean = false;
	mask: boolean = false;
	maxWidth: number | null = null;
	miterLimit: number = 10;
	name: string | null = null;
	opacity: number = 1;
	r1: number | null = null;
	r2: number | null = null;
	radius: number = 0;
	repeat: Parameters<CanvasRenderingContext2D["createPattern"]>[1] = "repeat";
	respectAlign: boolean = false;
	restrictDragToAxis: "x" | "y" | null = null;
	rotate: number = 0;
	rounded: boolean = false;
	scale: number = 1;
	scaleX: number = 1;
	scaleY: number = 1;
	shadowBlur: number = 0;
	shadowColor: string = "transparent";
	shadowStroke: boolean = false;
	shadowX: number = 0;
	shadowY: number = 0;
	sHeight: number | null = null;
	sides: number = 0;
	source: string = "";
	spread: number = 0;
	start: number = 0;
	strokeCap: CanvasRenderingContext2D["lineCap"] = "butt";
	strokeDash: number[] | null = null;
	strokeDashOffset: CanvasRenderingContext2D["lineDashOffset"] = 0;
	strokeJoin: CanvasRenderingContext2D["lineJoin"] = "miter";
	strokeStyle: string | Function = "transparent";
	strokeWidth: number = 1;
	sWidth: number | null = null;
	sx: number | null = null;
	sy: number | null = null;
	text: string = "";
	translate: number = 0;
	translateX: number = 0;
	translateY: number = 0;
	type: keyof (typeof maps)["drawings"] | null = null;
	visible: boolean = true;
	width: number | null = null;
	x: number = 0;
	y: number = 0;
	[key: string]: any;
}
interface JQuery {
	getEventHooks(): JQuery<HTMLCanvasElement>;
	setEventHooks(): JQuery<HTMLCanvasElement>;
	getLayers(
		callback?: (canvas: HTMLCanvasElement, layer: jCanvasObject) => any
	): jCanvasObject[];
	getLayer(): jCanvasObject;
	getLayerGroup(): jCanvasObject[];
	getLayerIndex(): number;
	setLayer(): JQuery<HTMLCanvasElement>;
	setLayers(): JQuery<HTMLCanvasElement>;
	setLayerGroup(): JQuery<HTMLCanvasElement>;
	moveLayer(): void;
	removeLayer(): void;
	removeLayers(): void;
	removeLayerGroup(): void;
	addLayerToGroup(): void;
	removeLayerFromGroup(): void;
	triggerLayerEvent(): void;
	drawLayer(): void;
	drawLayers(): void;
	drawImage(): void;
	drawText(): void;
	addLayer(): void;
	animateLayer(): void;
	draw(): void;
	animateLayerGroup(): void;
	delayLayer(): void;
	delayLayerGroup(): void;
	stopLayer(): void;
	stopLayerGroup(): void;
	draw(): void;
	clearCanvas(): void;
	saveCanvas(): void;
	restoreCanvas(): void;
	rotateCanvas(): void;
	scaleCanvas(): void;
	translateCanvas(): void;
	drawRect(): void;
	drawArc(): void;
	drawEllipse(): void;
	drawPolygon(): void;
	drawSlice(): void;
	drawLine(): void;
	drawQuadratic(): void;
	drawBezier(): void;
	drawVector(): void;
	drawPath(): void;
	drawText(): void;
	measureText(): void;
	drawImage(): void;
	createPattern(): void;
	createGradient(): void;
	setPixels(): void;
	getCanvasImage(): void;
	detectPixelRatio(): void;
}
